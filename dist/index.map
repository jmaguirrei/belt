{"version":3,"sources":["compact.js","get.js","has.js","last.js","omit.js","pick.js","random.js","range.js","sample.js","uid.js","uniq.js","index.js"],"names":["compact","array","filter","Boolean","get","obj","key","defaultValue","Object","keys","length","undefined","splittedKeys","split","exit","reduce","acum","value","has","hasKey","last","slice","omit","includes","pick","random","low","high","Math","floor","range","Array","map","elem","sample","uid","strLength","now","String","Date","middlePos","ceil","availableChars","availableCharsLength","str","i","charAt","substr","uniq","pos","arr","indexOf"],"mappings":"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","file":"index.map","sourceRoot":"../src","sourcesContent":["\n\nexport function compact(array) {\n\n  return array.filter(Boolean);\n\n}\n","\nexport function get(obj, key, defaultValue) {\n\n  // Undefined object\n  if (!obj) return defaultValue;\n  if (typeof obj === 'object' && Object.keys(obj).length === 0) return defaultValue;\n\n  // Key is number\n  if (typeof key === 'number') {\n    if (obj[key] === undefined) return defaultValue;\n    return obj[key];\n  }\n\n  // Key is string\n  const splittedKeys = key.split('.');\n  let exit = false;\n  return splittedKeys.reduce((acum, value) => {\n    if (exit) return defaultValue;\n    if (!acum[value]) {\n      exit = true;\n      return defaultValue;\n    }\n    return acum[value];\n  }, obj);\n\n\n}\n","\nexport function has(obj, key) {\n\n  const splittedKeys = key.split('.');\n\n  let hasKey = true;\n  splittedKeys.reduce((acum, value) => {\n    if (!hasKey) return null;\n    if (typeof acum[value] === 'undefined') {\n      hasKey = false;\n      return null;\n    }\n    return acum[value];\n  }, obj);\n\n  return hasKey;\n\n}\n","\n\nexport function last(array = []) {\n\n\n  if (array.length === 0) return null;\n\n  return [ ...array ].slice(-1)[0];\n\n\n}\n","\nexport function omit(obj, keys) {\n\n  return Object.keys(obj).reduce((acum, key) => {\n    if (keys.includes(key)) return acum;\n    if (typeof obj[key] === 'undefined') return acum;\n    return {\n      ...acum,\n      [key]: obj[key],\n    };\n  }, {});\n\n}\n","\nexport function pick(obj, keys) {\n\n  return Object.keys(obj).reduce((acum, key) => {\n    if (!keys.includes(key)) return acum;\n    if (typeof obj[key] === 'undefined') return acum;\n    return {\n      ...acum,\n      [key]: obj[key],\n    };\n  }, {});\n\n}\n","\n\nexport function random(low, high) {\n\n  if (!low && !high) return Math.random();\n  if (low && !high) return low * Math.random();\n  if (!low && high) return Math.random();\n\n  // Include boths edges as possible numbers\n  const length = high - low + 1;\n  return low + Math.floor(length * Math.random());\n\n}\n","\n\nexport function range(low = 0, high = 0) {\n\n  if (!high && low > 0) return [ ...Array(low).keys() ];\n\n  if (high - low <= 0) return [];\n\n  const array = [ ...Array(high - low).keys() ];\n  return array.map(elem => elem + low);\n\n}\n","\n\nexport function sample(array = []) {\n\n  if (array.length === 0) return null;\n\n  const rand = Math.floor(array.length * Math.random());\n  return array[rand];\n\n}\n","\nexport function uid(strLength = 6) {\n\n  const now = String(Date.now());\n  const middlePos = Math.ceil(now.length / 2);\n\n  const availableChars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n  const availableCharsLength = availableChars.length;\n\n  // Start the final string\n  let str = '';\n  for (let i = 1; i <= strLength; i++) {\n    const randChar = availableChars.charAt(\n      Math.floor(Math.random() * availableCharsLength)\n    );\n    // Append this character to the string\n    str += randChar;\n  }\n\n  return `${now.substr(0, middlePos)}-${str}-${now.substr(middlePos)}`;\n\n}\n\n","\n\nexport function uniq(array) {\n\n  return array.filter((elem, pos, arr) => {\n    return arr.indexOf(elem) === pos;\n  });\n\n}\n","\nimport { compact } from './compact';\nimport { get } from './get';\nimport { has } from './has';\nimport { last } from './last';\nimport { omit } from './omit';\nimport { pick } from './pick';\nimport { random } from './random';\nimport { range } from './range';\nimport { sample } from './sample';\nimport { uid } from './uid';\nimport { uniq } from './uniq';\n\nexport default {\n\n  compact,\n  get,\n  has,\n  last,\n  omit,\n  pick,\n  random,\n  range,\n  sample,\n  uid,\n  uniq,\n\n};\n"]}